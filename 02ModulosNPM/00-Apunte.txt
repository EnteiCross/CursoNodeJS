El Node Package Manager es el gestor de paquetes de Node.js... y de todo JavaScript.

comandos:
    npm -v      Nos indica la versión de NPM instalada en el ordenador.


Instalando paquetes
Tipos de instalación:
    • Única -   npm install nombre-paquete (no se recomenda).
    • Global -  npm install nombre-paquete -g.
    • Como dependencia del proyecto:
        npm install nombre-paquete --save
    • Como dependencia de desarrollo:
        npm install nombre-paquete --save-dev

La configuración de los módulos de Node.JS se encuentra en el archivo package.json,
en donde estara todo lo que debe ejecutar para el correcto funcionamiento de la aplicación.

Cuando descargamos un proyecto de Node.JS, lo primero que debemos de hacer es ejecutar este
archivo de configuración, para que descargue todas las dependencias del proyecto.


Para ignorar algun fichero de cualquier indole, así como directorios, debemos agregarlos en el
archivo de .gitignore


Paquetes globales
Se instalan locamente en nuestro ordenador.
    • Estan disponibles en todo momento.
    • Son paquetes que nos ayudarán con tareas administrativas, como:
        ► Monitoreo
        ► Depuración
        ► Automatización
        ► Copilación de código
        ► Etc

Ejemplos de pquetes globales:
    ► node-inspector
    ► supervision
    ► nodemon
    ► forever
    ► pm2


Depuración con el módulo Debugger
https://nodejs.org/dist/latest-v14.x/docs/api/debugger.html
Se coloca la palabra reservada "debugger" (sin comillas), en donde se quiere colocar
el pointbreak y pausar la ejecución del programa.
Para iniciar la ejecución en el modo de depuración se coloca la siguiente instrucción en la consola:
    • node debug nombre_del_modulo.js
Ademas este modo tiene varios comandos a utilizar en la consola:
    • Stepping
        ► cont / c  Continua la ejecución.
        ► next / n  Siguiente instrucción (paso por paso).
        ► step / s  Step in
        ► out  / o  Step out
        ► pause     Pone en espera la ejecución del código.

    • Breakpoints


Para ejecutar el modo de supervision con nodemon se ejecuta en la terminal con el comando
nodemon nombre_del_modulo.js

forever
    Es una simple herramienta del CLI que nos permite ejecutar scripts de Node de manera
    continua.

pm2
   Es un gestor de procesos de producción para aplicaciones construidas con Node.js

forever y pm2 son similares, pero pm2 tiene una interfaz de monitoreo más amigable.


Dependencias del proyecto
    • Una dependencia es un paquete externo al core de Node.
    • Son desarrollados por la comunidad.
    • Al instalarlos deben quedar registrados en el archivo de configuración (package.json).

package.json
    • Para crearlo se utiliza el comando "npm init" (sin comillas).
    • Instalar paquetes como dependencias:
        npm install nombre-paquete --save
    • Instalar dependencias de un proyecto:
        npm install
    • Se debe revisar el Semantic Versioning apra el correcto versionado de nuestros paquetes.

Al declarar variables con el identificador "let" (sin comillas), se tratara de una variable
local dentro del contexto del bloque de código.


Dependencias de desarrollo
    • se tratan de paquetes externos al core, desarrollados por la comunidad.
    • Permiten facilitar y optimizar las tareas comunes para el desarrollo o publicaciónd e la aplicación.
    • Para instalar se hace con el comando:
        npm install nombre-paquete --save-dev
    • Normalmente se utiliza para el desarrollo de front end.


Node.js maneja la asincronía utilizando "callbacks"
    • Son continuaciones explícitas como funciones, cuando termina ejecuta otra función.
    • Son faciles de entender e implementar, asi como tambien son familiares para un programador de JS.
    • Son muy flexibles, y tienen un mecanismo universal con la asincronía.
    • Sin embargo tiene un problema, llamado "Callback Hell".

Promesa = Flujo de ejecución
    • Se trata de una alternativa para modelar la asincronía.
    • Tienen una construcción explícita del flujo de ejecución.
    • Separación en bloques consecutivos.
    • Tiene una gestion de errores más controlada.
    • Contiene una combinación de diferentes flujos asincrono.
    